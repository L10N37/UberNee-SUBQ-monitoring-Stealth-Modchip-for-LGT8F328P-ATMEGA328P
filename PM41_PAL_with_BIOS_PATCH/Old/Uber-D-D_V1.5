/*
  Stealth modchip with Single Wire BIOS patch for PM41 [Uber-dd V1.5]
  Quote VajskiDs himself - "it's reliable enough" :P


  V1.5:

  The Long Version:

  V1 is an excited rushed release after having so many games boot with hardly any fails, after going back to it later, it was like it needed to warm up before it started to work.
  I guess it's a downfall of timing based chips - this one is using the timing of the internal timing of it's own injection routine to in-turn time the BIOS patch on the fly! so it's even
  more critical.

  This release gives a clean black screen with no double 'd's, also after changing to counting bits (could have just counted full string iterations on character 's') , there was never really any debugging
  I attached an LED to give an indication of when the string injections started and stopped and was able to reduce
  the bitcount to the minimum required, then decided to just use NTSC counter variable as a string counter and ditched the bitcounter... Not sure how the stealth games still loaded! it seemed to be sending strings WELL into the games running.

  I added back a serial debugger to help with program flow and control (A must have! this was added to V1 as well but not uploaded) and also an LED debugger which had interesting results
  The LED pulses with string injections and was actually stopping pulsing as soon as a game disc was accepted or rejected just prior the black screen or PSX 'no disc' BIOS screen, it then resumed pulsing with string  injections.
  If it didn't stop pulsing at all, the disc was always 100% rejected. At first, I thought this was an unplanned and welcome addition, as it gave a definitive visual of whether it would black screen or not just prior to it happening.
  After looking further into it (AKA staring at an LED wondering what the hell was happening) I figured something was definitely wrong - every slight change to the code would make something strange happen. Sometimes it would kick me straight out of the injection routine even if my
  set injection cycles weren't complete - as soon as it black screened, it kicked me out of the loop! I'd end up in drivelidstatus function (confirmed by the LED). Other times it would start the injection cycle again! i.e set to 28 cycles, black screen, then do another 28 cycles!
  This was verified as not a software issue by using the serial monitor debugger and I couldn't replicate it unless it was running on the console.
  This drove me crazy and I blamed the source of power but couldn't find a suitable alternative. I ended up adding a 220uf bypass cap which changed more than you could imagine so had to re-code a lot to suit.

  Due to so many strange occurences (it's a haunted console) this will probably be broken again next time I turn on the console.





  The Short Version:

  Added a 220UF bypass cap
  tightened up the timing of the on the fly BIOS patch, no more double D's (clean black screen)
  Changed start up delay timing to suit the new capacitor - gets into action much quicker now....!
  Added an activity LED that pulses with each string injection, then blinks every 4 seconds once its in stealth mode and monitoring the drive lid status - it should go full solid with a drive lid open but yet to check.

  The LED high-side is 5v on the console, the arduino D2 pin is it's Low-side/ path to ground. (3.3v was too weak for any LED's on hand)


  This version is to be considered a personal back-up and , but have lost code before when trying so many different methods.
  
  Will be splitting the 7.5v input off onto a separate 3.3v LDO with a cap, have a feeling the 3.xxV rail is too noisy on this board.

*/

#define DRIVE_LID_SENS 8
#define LED 2 //LED for debugging, pulses with string iterations, hooked to 5v on mainboard with negative leg to D2 (arduino is providing the low-side/ path to ground)
#define DATA 12
#define PSOneBIOS1 11        //  **                            **
#define mchipregister PIND    //register for monitoring high/low states (read only)
#define mchipregwrite PORTD   //register to write pin states to in setup
#define DRIVE_LID_SENS_REG PINB //the register with the DATA line and our drive lid sensor line
int bitdelay (3794); //delay between bits sent to drive controller (MS)
int stringdelay (170); //delay between string injections
const int Lid_Open = (0B000001); //so we don't have to refer to the states in bits further on
const int Lid_Closed = (0B000000);
char SCEE[] = "S100110101001001111010010101110100H01011101KK";
//H =1 , K = 0                                       'E'
int NTSC_FIX = 0; //variable to help time NTSC patch for PAL PSOne and count string injections


void setup() {
  //Set up the used pins
  Serial.begin (57600);
  pinMode (PSOneBIOS1, INPUT);
  pinMode (LED, INPUT);
  digitalWrite (LED, LOW);
  pinMode (DATA, OUTPUT);
  digitalWrite (DATA, LOW);
  pinMode (DRIVE_LID_SENS, INPUT);
  digitalWrite (mchipregwrite, 0B00001011); //LED will blink quickly @ power on
  digitalWrite (DRIVE_LID_SENS_REG, 0B000000);
}
void StartUpDelay() {
  Serial.println ("   START UP DELAY  ");
  //delay (3800); //This equates to about 6s if you switch on the system and count, probably because of the bootloader
  delay (5000); //new delay with 220uf bypass cap, as of Uber D-D V1.1
  inject();
}
void NewDisc() {
  do
  {
    Serial.println ("   AWAITING NEW DISC  ");
    pinMode (LED, OUTPUT);
    digitalWrite (LED, HIGH);
    delay (1500);
  }
  while (DRIVE_LID_SENS_REG == Lid_Open);


  pinMode (LED, INPUT);
  inject();
}
void DriveLidStatus() { //a conditional loop for the status of the drive lid sensor pin using the state of it's entire register
  //for multi-disc games
  pinMode (LED, INPUT);
  delay (3000);

  if (DRIVE_LID_SENS_REG == Lid_Closed) { //state of this register after initial injection routine with lid closed
    pinMode (LED, OUTPUT);
    digitalWrite (LED, HIGH);  //pulse the LED light every 4 seconds to indicate string injections complete, stealth mode on, awaiting disc change
    NTSC_FIX = 0 ; // reset variable
    delay (1000);

    Serial.println ("   LID CLOSED, STEALTH ACTIVE, MONITORING FOR CHANGES   ");

  }
  else if (DRIVE_LID_SENS_REG == Lid_Open) {  //monitor register state with this pin for sensing purposes, data idles low after injection, only need to look for a change in one bit (lid sens pin)
    Serial.println ("   LID OPENED ");
    delay (1350);
    NewDisc();
  }
  DriveLidStatus();                           //forms a conditional if loop
}
void inject() {

  if (DRIVE_LID_SENS_REG == Lid_Open) // Drive lid status check during injection routine
  {
    DriveLidStatus();
  }

  if (NTSC_FIX == 88)                 // JUMP TO DRIVE LID STATUS IF LID IS OPENED DURING INJECTION ROUTINE
  {

    pinMode (PSOneBIOS1, INPUT); //just in-case
    pinMode (DATA, INPUT);
    DriveLidStatus();
  }

  /* re-implemented below, which was the original idea - faulty Arduino threw me off track
    //888888888888888888888888888888888888==   BIOS STUFF    =888888888888888888888888888888888888//

     if (NTSC_FIX > 8 && (NTSC_FIX < 26))                        // No rocket-science here!
     {
       pinMode (PSOneBIOS1, OUTPUT);                             // Simply attempt to spoof NTSC console detection by pulling BIOS D2 low between
       digitalWrite (PSOneBIOS1, LOW);                           // these string injection iterations
       Serial.println ("   BIOS D2 LOW @ ");
       Serial.println (NTSC_FIX);
       Serial.println ("   INJECTIONS  ");
     }


     if (NTSC_FIX == 26)
     {
       pinMode (PSOneBIOS1, INPUT);                              // Then release the line!
       Serial.println ("   BIOS D2 RELEASED @ ");
       Serial.println (NTSC_FIX);
       Serial.println ("   INJECTIONS  ");
     }                                                           // This is EXTREMELY touchy! as non-precise as it seems, it's actually quite precise (string delay/ start-up delay need to be factored into the timing)

     //888888888888888888888888888888888888==   BIOS STUFF    =888888888888888888888888888888888888//
  */

  {
    for (byte i = 0; i < sizeof(SCEE) - 1; i++)
      if (SCEE[i] == '1')                                                       // '1' / HIGH BITS
      {
        pinMode (DATA, INPUT);
        delayMicroseconds (bitdelay);
      }
      else if (SCEE[i] == 'S')                                                  // BETWEEN STRING INJECTIONS
      {
        pinMode (LED, OUTPUT);
        digitalWrite (LED, HIGH);
        delay(stringdelay); //string delay when it hits 's' (end of injection string bits)
        pinMode (LED, INPUT);
        Serial.println (NTSC_FIX);
        Serial.println ("   FULL STRINGS INJECTED  ");
        NTSC_FIX = (NTSC_FIX + 1);
      }
      else if (SCEE[i] == 'H' && (NTSC_FIX < 20 && NTSC_FIX > 8))               //  BIOS STUFF (this window varies game to game, but can't be opened too wide)
      {
        pinMode (PSOneBIOS1, OUTPUT);
        digitalWrite (PSOneBIOS1, LOW);
        pinMode (DATA, INPUT);
        delayMicroseconds (bitdelay);
      }
      else if (SCEE[i] == 'K' && (NTSC_FIX < 20 && NTSC_FIX > 8))               //  BIOS STUFF (this window varies game to game, but can't be opened too wide)
      {
        pinMode (PSOneBIOS1, INPUT);
        pinMode (DATA, OUTPUT);
        digitalWrite (DATA, LOW);
        delayMicroseconds (bitdelay);
      }
      else if (SCEE[i] == 'H')   //treat as normal '1' bit                      // REVERT TO TREATING AS NORMAL POST BIOS STUFF
      {
        pinMode (PSOneBIOS1, INPUT); //revert D2 BIOS
        pinMode (DATA, INPUT);
        delayMicroseconds (bitdelay);
      }
      else if (SCEE[i] == 'K')   //treat as normal '0' bit                      // REVERT TO TREATING AS NORMAL POST BIOS STUFF
      {
        pinMode (DATA, OUTPUT);
        digitalWrite (DATA, LOW);
        delayMicroseconds (bitdelay);
      }
      else if (SCEE[i] == '0')                                                  // '0' / LOW BITS
      {
        pinMode (DATA, OUTPUT);
        digitalWrite (DATA, LOW);
        delayMicroseconds (bitdelay);
      }

  }

  inject();                                                                     // KEEP LOOPING UNTIL CONDITION IS MET @ START OF FUNCTION
}
void loop() {
  StartUpDelay();             // else jump to here                              // JUMP STRAIGHT TO START UP DELAY
}
